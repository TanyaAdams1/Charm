# ref:  https://people.csail.mit.edu/sanchez/papers/2016.cachecalc.cal.pdf
#       "Cache calculus: Modeling Caches through Differential Equations"

## SAMPLE:

define N_iteration:
    T_peak : I+
    K_prime : R+
    D[] : I+
    N_iteration : I+
    N_iteration = Sum(floor(t / K_prime + 1) * D[t], (t, 0, T_peak))

##


define P_A:
    # prob. that line has survived to age a
    cachesize: I+ as S
    a: I+
    P_H[]: R+
    P_E[]: R+
    P_A[]: R+
    P_A[a] = (1/S) * Sum(P_H[x]+P_E[x], (x,a,inf)) #inf?

define P_H:
    # prob. that cacheline will reach age a
    a: I+
    P_D[]: R+
    P_E[]: R+
    ## ?? ?? ?? [D>x]
    P_H[a] = P_D[a] * (1 - (Sum(P_E[x]/P[D>x], (x,1,a-1)) ) )

define P_E:
    # prob. that eviction occurs at age a
    # uses only random replacement
    P_E[]: R+
    miss: I+
    P_E[a] = P[miss] * P_A[a]
