typedef R+ : float r
    r > 0

typedef I+ : int i
    i > 0

define cmos_55nm_model:
    V : R+ #V
    C_wire : R+ #F/m
    R_wire : R+ #ohm/m
    E_dff_clk_cell : R+ #J
    E_dff_0to1 : R+ #J
    E_dff_0to0 : R+ #J
    E_dff_1to1 : R+ #J
    E_dff_1to0 : R+ #J
    E_nand : R+ #J
    E_nor : R+ #J
    E_not : R+ #J
    E_and : R+ #J
    E_or : R+ #J
    Pl_dff : R+ #W
    Pl_nand : R+ #W
    Pl_nor : R+ #W
    Pl_not : R+ #W
    Pl_and : R+ #W
    Pl_or : R+ #W
    Pl_sram : R+ #W
    A_dff : R+ #m^2
    A_nand : R+ #m^2
    A_nor : R+ #m^2
    A_not : R+ #m^2
    A_and : R+ #m^2
    A_or : R+ #m^2
    A_sram : R+ #m^2
    T_nand : R+ #s
    T_nor : R+ #s
    T_not : R+ #s
    T_and : R+ #s
    T_or : R+ #s
    T_dff_clk_to_q : R+ #s

    V = 1.2
    C_wire = 145 * 10**(-12)
    R_wire = 1700 * 10**3
    E_dff_clk_cell = 0.1155 * 10**(-15)
    E_dff_0to1 = 6.424 * 10**(-15)
    E_dff_0to0 = 2.161 * 10**(-15)
    E_dff_1to1 = 2.146 * 10**(-15)
    E_dff_1to0 = 5.506 * 10**(-15)
    E_nand = 0.857 * 10**(-15)
    E_nor = 0.798 * 10**(-15)
    E_not = 0.575 * 10**(-15)
    E_and = E_nand + E_not
    E_or = E_nor + E_not
    Pl_dff = 0.000602 * 10**(-6)
    Pl_not = 0.0000648 * 10**(-6)
    Pl_nand = 0.0000584 * 10**(-6)
    Pl_nor = 0.0000584 * 10**(-6)
    Pl_and = Pl_nand + Pl_not
    Pl_or = Pl_nor + Pl_not
    Pl_sram = 0.000231 * 10**(-6)
    A_dff = 15 * 10**(-12)
    A_nor = 1.809 * 10**(-12)
    A_nand = 1.701 * 10**(-12)
    A_not = 1.34 * 10**(-12)
    A_and = 2.26 * 10**(-12)
    A_or = 2.26 * 10**(-12)
    A_sram = 2.207 * 10**(-12)
    T_nand = 13 * 10**(-12)
    T_nor = 11 * 10**(-12)
    T_not = 10 * 10**(-12)
    T_and = 24 * 10**(-12)
    T_or = 21 * 10**(-12)
    T_dff_clk_to_q = 120 * 10**(-12)

define race_sr_model:
    sr_length : I+
    exec_time : I+
    T_critical : R+
    E_clk_sr : R+ as E_clk #J
    E_qd_sr : R+ as E_qd #J
    E_w_sr : R+ as E_w #J
    E_g_sr : R+ as E_g #J
    E_l_sr : R+ as E_l #J
    E_sr : R+ as E #J
    A_sr : R+ as A #m^2 
    E_dff_clk_cell : R+
    E_dff_0to1 : R+
    E_dff_0to0 : R+
    E_dff_1to1 : R+
    E_dff_1to0 : R+
    Pl_dff : R+
    A_dff : R+
  
    E_clk = E_dff_clk_cell * exec_time * sr_length
    E_qd = (E_dff_0to1 * 1 + E_dff_1to0 * 1 + ((E_dff_0to0 + E_dff_1to1)/2) * (exec_time - 1)) * sr_length
    E_w = 0
    E_g = 0
    E_l = (Pl_dff * T_critical * exec_time) * sr_length
    E = E_clk + E_qd + E_w + E_g + E_l
    A = A_dff * sr_length

define race_buffer_model: 
    buffer_size : I+
    exec_time : I+
    T_critical : R+
    E_clk_buffer : R+ as E_clk #J
    E_qd_buffer : R+ as E_qd #J
    E_w_buffer : R+ as E_w #J
    E_g_buffer : R+ as E_g #J
    E_l_buffer : R+ as E_l #J
    E_buffer : R+ as E #J
    A_buffer : R+ as A #m^2
    E_dff_clk_cell : R+
    E_dff_0to1 : R+
    E_dff_0to0 : R+
    E_dff_1to1 : R+
    E_dff_1to0 : R+
    Pl_dff : R+
    A_dff : R+

    E_clk = E_dff_clk_cell * exec_time * buffer_size
    E_qd = (E_dff_0to1 * 1 + E_dff_1to0 * 1 + ((E_dff_0to0 + E_dff_1to1)/2) * (exec_time - 1)) * buffer_size
    E_w = 0
    E_g = 0
    E_l = (Pl_dff * T_critical * exec_time) * buffer_size
    E = E_clk + E_qd + E_w + E_g + E_l
    A = A_dff * buffer_size

define inhs_array_model:
    n_inhs : I+
    exec_time : I+
    T_critical : R+
    E_clk_inhs : R+ as E_clk #J
    E_qd_inhs : R+ as E_qd #J
    E_w_inhs : R+ as E_w #J
    E_g_inhs : R+ as E_g #J
    E_l_inhs : R+ as E_l #J
    E_inhs : R+ as E #J
    A_inhs : R+ as A #m^2
    E_dff_clk_cell : R+
    E_dff_0to1 : R+
    E_dff_0to0 : R+
    E_dff_1to1 : R+
    E_dff_1to0 : R+
    E_and : R+
    E_not : R+
    E_or : R+
    Pl_and : R+
    Pl_not : R+
    Pl_or : R+
    Pl_dff : R+
    A_and : R+
    A_not : R+
    A_or : R+
    A_dff : R+

    E_clk = (E_dff_clk_cell * exec_time) * n_inhs
    E_qd = (E_dff_0to1 * 1 + E_dff_1to0 * 1 + ((E_dff_0to0 + E_dff_1to1)/2) * (exec_time - 1)) * n_inhs
    E_w = 0
    E_g = (2 * E_and + 2 * E_not + E_or) * n_inhs
    E_l = (2 * Pl_and + 2 * Pl_not + Pl_or + Pl_dff) * T_critical * exec_time * n_inhs
    E = E_clk + E_qd + E_w + E_g + E_l
    A = (2 * A_and + 2 * A_not + A_or + A_dff) * n_inhs

define treecoder_model:
    depth : I+
    exec_time : I+
    T_critical : R+
    E_clk_dec : R+ as E_clk #J
    E_qd_dec : R+ as E_qd #J
    E_w_dec : R+ as E_w #J
    E_g_dec : R+ as E_g #J
    E_l_dec : R+ as E_l #J
    E_dec : R+ as E #J
    A_dec : R+ as A #m^2
    E_and : R+
    Pl_and : R+
    A_and : R+

    E_clk = 0
    E_qd = 0
    E_w = 0
    E_g = 2**log(depth, 2) * E_and * 2**depth
    E_l = 2**log(depth, 2) * Pl_and * T_critical * exec_time * 2**depth
    E = E_clk + E_qd + E_w + E_g + E_l
    A = 2**log(depth, 2) * A_and * 2**depth

define mem_model:
    mem_cell_bits : I+ as mem_bits
    n_mem_cells : I+
    exec_time : I+
    T_critical : R+
    E_clk_mem : R+ as E_clk #J
    E_qd_mem : R+ as E_qd #J
    E_w_mem : R+ as E_w #J
    E_g_mem : R+ as E_g #J
    E_l_mem : R+ as E_l #J
    E_mem : R+ as E #J
    A_mem : R+ as A #m^2
    V : R+
    C_wire : R+
    Pl_sram : R+
    A_sram : R+

    E_clk = 0 
    E_qd = 0
    E_w = ((mem_bits * A_sram**.5 * C_wire * V**2)/2) * n_mem_cells
    E_g = 0
    E_l = (Pl_sram * mem_bits) * T_critical * exec_time * n_mem_cells
    E = E_clk + E_qd + E_w + E_g + E_l
    A = (A_sram * mem_bits) * n_mem_cells

define xbar_sram_model:
    xbar_clmns : I+
    xbar_rows : I+
    xbar_v_length : R+ as v_length
    xbar_h_length : R+ as h_length
    E_clk_xbar : R+ as E_clk #J
    E_qd_xbar : R+ as E_qd #J
    E_w_xbar : R+ as E_w #J
    E_g_xbar : R+ as E_g #J
    E_l_xbar : R+ as E_l #J
    E_xbar : R+ as E #J
    A_xbar : R+ as A #m^2
    V : R+
    C_wire : R+
    Pl_sram : R+
    A_sram : R+    

    v_length = xbar_rows * A_sram**.5
    h_length = xbar_clmns * A_sram**.5
    E_clk = 0
    E_qd = 0
    E_w = ((v_length * xbar_clmns + h_length * xbar_rows) * C_wire * V**2)/2
    E_g = 0
    E_l = xbar_clmns * xbar_rows * Pl_sram
    E = E_clk + E_qd + E_w + E_g + E_l
    A = xbar_clmns * xbar_rows * A_sram

define est_model:
    E_est : R+ #J
    E_sr : R+
    E_inhs : R+
    E_dec : R+
    E_mem : R+
    E_buffer : R+
    E_xbar.thresholds : R+
    E_xbar.features : R+
    A_est : R+ #m^2
    A_sr : R+
    A_inhs : R+
    A_dec : R+
    A_mem : R+
    A_buffer : R+
    A_xbar.thresholds : R+
    A_xbar.features : R+
    sr_length : I+
    buffer_size : I+
    exec_time : I+
    T_critical : R+
    n_inhs : I+
    n_mem_cells : I+
    xbar_clmns.thresholds : I+
    xbar_rows.thresholds : I+
    xbar_clmns.features : I+    
    xbar_rows.features : I+
    xbar_h_length.thresholds : R+
    xbar_h_length.features : R+
    #xbar_v_length : R+
    #E_temp : R+
    #A_temp : R+
    res : I+
    n_features : I+
    depth : I+
    est_trees : I+

    sr_length = 2**res - 1
    buffer_size = n_features
    exec_time = 2**res
    n_inhs = 2**depth - 1
    n_mem_cells = 2**depth
    T_critical = xbar_h_length.thresholds + xbar_h_length.features
    E_est = E_sr + E_buffer + (E_inhs + E_dec + E_mem + E_xbar.thresholds + E_xbar.features) * est_trees
    A_est = A_sr + A_buffer + (A_inhs + A_dec + A_mem + A_xbar.thresholds + A_xbar.features) * est_trees

define forest_model:
    E : R+ #nJ
    A : R+ #mm^2
    E_est : R+
    A_est : R+
    n_ests : I+
  
    E = E_est * n_ests * 10**9
    A = A_est * n_ests * 10**6


given cmos_55nm_model, race_sr_model, race_buffer_model, inhs_array_model, treecoder_model, mem_model, xbar_sram_model, est_model, forest_model

assume n_ests = 100
assume est_trees = 10
assume depth = 6
assume n_features = 784
assume res = 8
assume mem_cell_bits = 8 
assume xbar_clmns.thresholds = 2**res
assume xbar_rows.thresholds = 2**depth - 1
assume xbar_clmns.features = n_features
assume xbar_rows.features = 2**depth - 1 

explore E, A





