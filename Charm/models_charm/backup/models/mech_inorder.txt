# mechanistic in-order model
# ref:  https://ieeexplore.ieee.org/document/6189202/
#       "A mechanistic performance model for superscalar in-order processor"

define total_exec_cycles:
    W: I+                           # processor width
    dynamic_instr: I+ as N          # no. dynamically executed instructions
    penalty_from_misses: R+ as pmisses      # penalty due to miss events
    penalty_from_long: R+ as pll            # penalty due to long latency instr
    penalty_from_dependencies: R+ as pdeps  # penalty due to inter-instruction dependencies
    total_exec_cycles: R+ as T      # total number of execution cycles
    T = (N/W) + pmisses + pll + pdeps

# penalty from miss events:
# 1
define penalty_from_misses:
    misses_br: I+
    penalty_br: I+
    misses_cache: I+
    penalty_cache: I+
    penalty_from_misses: R+ as pmisses      # penalty due to miss events
    pmisses = (misses_br * penalty_br) + (misses_cache * penalty_cache)

# 2
define penalty_cache_miss:
    misslatency: R+
    W: I+                           # processor width
    penalty_cache_miss: R+
    penalty_cache_miss = misslatency - ((W-1)/2*W)

# 3
define penalty_branch_miss:
    D: I+       # depth of front-end pipeline
    W: I+                           # processor width
    penalty_branch_miss: R+
    penalty_branch_miss = D + ((W-1)/2*W)

# penalty from long latency instructions:
# 1
define penalty_from_long:
    dynamic_instr[]: I+ as N[]
    penalty[]: R+
    penalty_from_long: R+ as pll
    pll = Sum( N[i]*penalty[i] ,(i,LLtypes)) ## ???? TODO

# 2
define penalty_long_latency:
    latencyLL: R+
    W: I+
    penalty_long_latency: R+
    penalty_long_latency = (latencyLL - 1) - ( (W-1)/2*W )

# penalty due to dependencies
# 1
define penalty_from_dependencies:
    p_dep_unit: R+
    p_dep_ll: R+
    p_dep_ld: R+
    penalty_from_dependencies: R+ as pdeps
    pdeps = p_dep_unit + p_dep_ll + p_dep_ld

# 2
define p_dep_unit:
    W: I+
    d: I+ # dependency distance
    deps_unit[d]: R+ # no. instr. dependent on unit latency at distance d #TODO
    p_dep_unit: R+
    p_dep_unit = Sum((deps_unit[d], (d,1,W-1)) * (W-d/W)^2

# 3
define p_dep_ll:
    W: I+
    d: I+ # dependency distance
    deps_ll[d]: R+ # no. instr. dependent on long latency instr. at distance d #TODO
    p_dep_ll: R+
    p_dep_ll = Sum( (deps_ll[d]), (d,1,W-1))

# 4
define p_dep_ld:
    W: I+
    d: I+ # dependency distance
    deps_ld[d]: R+ # no. instr. dependent on long latency instr. at distance d #TODO
    p_deps_ld: R+
    p_deps_ld = Sum( (deps_ld[d] * ( (W-d)/W ) * ( (2*W - d)/W) + d/W), (d,1,W-1)) + Sum( (deps_ld[d] * ((2*W - d)/W)^2), (d,W, (2*W)-1 ))

# testing:
