<statement> ::= <metricDecl> | <typeDecl> | <ruleDecl> | <analysisStatement>;
<metricDecl> ::= "metric" <term> ":" <varDecl> {<varDecl>} <expr> {<expr>};
<typeDecl> ::= "typedef" <typeName> ":" <pyType> <term> <expr>;
<ruleDecl> ::= "define" <term> ":" <varDecl> {<varDecl>} <expr> {<expr>};
<analysisStatement> ::= <assumeStatement> | <letStatement> | <solveStatement>;
<varDecl> ::= <term> ":" <typeName> [as <term>];
<expr> ::= <component> (<equalityOp> | <inequalityOp>) <component>;
<component> ::= <term> [<operator> (<term> | "(" <component> ")")];
<equalityOp> ::= "=";
<inequalityOp> ::= "<" | ">" | "<=" | ">=";
<operator> ::= "+" | "-" | "*" | "/" | "**";
<typeName> ::= <term> ["+" | "-"];
<pyType> ::= "int" | "float";
<term> ::= (alphanums | "_") {<term>};
<assumeStatement> ::= "assume" <term> {<term>};
<letStatement> ::= "let" <term> "=" (<distribution> | <term> | <index> | <list>);
<solveStatement> ::= "solve" <term>;
<distribution> ::= <distributionName> "(" {<component>} ")";
<index> ::= "Index" "(" <component> <component> ")";
<list> ::= "[" <component> {<component>} "]";
