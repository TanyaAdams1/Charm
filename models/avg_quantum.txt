typedef R+ : float r
    r >= 0.

typedef I+ : int i
    i >= 0

typedef R1+ : float r
    r >= 1.

typedef Prob : float f
    f >= 0.
    f <= 1.

define Volumn:
    N_iteration : R+
    V_distill : R+
    Volumn : R+
    Volumn = N_iteration * V_distill

define N_iteration:
    T_peak : I+
    L_cp : I+
    K_prime : R+
    D[] : I+
    d : R+
    l : I+
    R : R+
    N_iteration : R+
    R = (7 * d + 15) / (24 * d * l)
    N_iteration = Sum((ufloor(t / K_prime) * K_prime**.5 + R * ((t-K_prime * ufloor(t / K_prime))/2)**.5) * L_cp * D[t], (t, 0, T_peak))

define K_prime:
    K : R1+
    l : I+
    epsilon_inject : R+ as e
    K_prime : R+
    K_prime = K * Product((1-(3*K**(1/l)+8) * (1+3*K**(1/l))**(2**(r-1)-1) * e**(2**(r-1))), (r, 1, l))

define V_distill:
    K : R1+
    l : I+
    d : R+
    V_distill : R+
    V_distill = (3*K**(1/l) + 8)**(l-1) * (6*K**(1/l) + 16) * 12 * d**3 * l

define surface_code:
    P_success : Prob as p
    N_total : I+ as n
    d : R+
    epsilon_in : R+ as e
    p / n = d * (100 * e) ** ((d+1)/2)

given K_prime, V_distill, N_iteration, Volumn
assume K = [50, 1]
assume (l, d) = [(2, 14.), (1, 4.)]
assume epsilon_in = Gauss(10 ** -3, .0001, 0)
#assume epsilon_in = Gauss(10 ** -5, .000001, 0)
#assume N_total = 3 * 10 ** 6
assume epsilon_inject = 0.4 * epsilon_in
assume T_peak = 99
assume L_cp = 1
assume D[] = File(/home/weilong/Downloads/Ising_100_hist)
explore Volumn
