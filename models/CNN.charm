typedef I+ : int i
    i > 0

typedef R+ : float r
    r > 0

define utilization:
    computation_roof : R+ as roof
    computation : R+ as comp
    util : R+
    util = comp / roof

define xilinx_xc7vh870t_3:
    computation : R+ as cmpt
    computation_roof : R+ as roof
    bandwidth : R+ as bw
    bram_usage : R+
    # GFLOPS (GMACS) = #DSP_SLICES * FLOPS/(CYCLE*DSP_SLICE) *F_MAX
    roof = 3734.0
    cmpt <= roof
    bw <= 420.0/8
    bram_usage <= 50760.0 * 1000 * 1000/8

# reference: Zhang, Chen, et al. "Optimizing fpga-based accelerator design for deep convolutional neural networks." Proceedings of the 2015 ACM/SIGDA International Symposium on Field-Programmable Gate Arrays. ACM, 2015.

define CNN:
    R : I+
    C : I+
    M : I+
    N : I+
    K : I+
    T_m : I+
    T_n : I+
    computation : R+ as comp
    comp = (2 * M * N) / (ceiling(M / T_m) * ceiling(N / T_n))

    a_in : R+
    a_weight : R+
    a_out : R+
    B_in : I+
    B_weight : I+
    B_out : I+
    T_r : I+
    T_c : I+
    S : I+
    bram_usage : R+ as bram
    computation_to_communication_ratio : R+ as ctc
    bandwidth : R+ as bw
    a_in = (M * N * R * C) / (T_m * T_n * T_r * T_c)
    a_weight = a_in
    a_out = (M * R * C) / (T_m * T_r * T_c)
    B_in = T_n * (S * T_r + K - S) * (S * T_c + K - S)
    B_weight = T_m * T_n * K * K
    B_out = T_m * T_r * T_c
    bram = B_in + B_weight + B_out 
    bw = comp / ctc
    ctc = (2 * R * C * M * N * K * K) / (a_in * B_in + a_weight * B_weight + a_out * B_out)
    
    T_m > 0
    T_n > 0
    T_r > 0
    T_c > 0
    T_m <= M
    T_n <= N
    T_r <= R
    T_c <= C

given xilinx_xc7vh870t_3, CNN
#assume (N, M, R, C, K, S) = [(3, 48, 55, 55, 11, 4), (48, 128, 27, 27, 5, 1)]
assume (N, M, R, C, K, S) = (48, 128, 27, 27, 5, 1)
assume (T_r, T_c) = (20, 27)
explore T_m, T_n, T_r, T_c, computation@0.1, bandwidth@-0.1, computation_to_communication_ratio
