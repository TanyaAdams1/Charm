typedef R+ : float r
	r > 0

typedef I+ : int i
	i > 0

# Ref: https://ieeexplore.ieee.org/document/8192486/

define logCA_basemodel:

	# Parameters #
	g : I+ # granularity = bytes of data to the accelerator
	b : R+ # complexity exp.
	C : I+ # computational index
	o : I+ # overhead
	A : R+ # acceleration 
	L : I+ # interface latency
	speedup : R+
	speedup_large_g : R+
	speedup_small_g : R+
	g1 : I+ # granularity to achieve a speedup of 1
	g_half : I+ # granularity to achieve a speedup half of the acceleration

	# Equations #
	speedup = (C * g**b)/(o + L + (C * g**b)/A) # Eq.2
	speedup_large_g = A # Eq.3
	speedup_small_g = C/(o + L + C/A) # Eq.4
	g1 = ((A/(A-1))*(o+L)/C)**(1/b) # Eq.5
	g_half = (A*(o+L)/C)**(1/b) # Eq.6i



define logCA_g_latency_model:

        # Parameters #
        g : I+ # granularity = bytes of data to the accelerator
        b : R+ # complexity exp.
        C : I+ # computational index
        o : I+ # overhead
        A : R+ # acceleration 
        L : I+ # interface latency
        speedup : R+
        speedup_large_g : R+
        speedup_small_g : R+
        g1 : I+ # granularity to achieve a speedup of 1
        g_half : I+ # granularity to achieve a speedup half of the acceleration

        # Equations #
        speedup = (C * g**b)/(o + L*g + (C * g**b)/A) # Eq.8
        speedup_large_g = A/(((A*L*g)/(C*g**b))+1) # Eq.9 
        speedup_small_g = (A*C)/(A*(o + L) + C) # Eq.10
        g1 = (C*(b-1)*(A-1)+A*o)/(C*b*(A-1)-A*L) # Eq.11
        g_half = (C*(b-1)+A*o)/(C*b-A*L) # Eq.12


# Example from Table 5 for AES
given logCA_g_latency_model
# currently, CMARM does not support typechecking. In reality, all granularities should be int.
assume g = 3.5
assume b = 1.01
assume L = 3
assume o = 10
assume C = 35
assume A = 6
explore g_half, speedup
